name: CICD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Checks
        run: npm run pre-push

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Test
        run: npm run test

  int-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Timeout Test (Explicit Approval)
        id: test-timeout
        continue-on-error: true
        uses: ./
        with:
          timeout-seconds: 3
          issue-title: Integration Test - Timeout (Explicit Approval)!

      - name: Verify Timeout Test (Explicit Approval)
        run: |
          if [ "${{ steps.test-timeout.outcome }}" != "failure" ]; then
            echo "ERROR: Test step outcome should have been 'failure' but is '${{ steps.test-timeout.outcome }}'"
            exit 1
          fi
          echo "Approval Status: '${{ steps.test-timeout.outputs.status }}'"
          if [ "${{ steps.test-timeout.outputs.status }}" != "timed-out" ]; then
            echo "ERROR: Timeout test should have been timed-out but is '${{ steps.test-timeout.outputs.status }}'"
            exit 1
          fi
          echo "Issue URL: '${{ steps.test-timeout.outputs.issue-url }}'"

          ISSUE_NUMBER=$(echo "${{ steps.test-timeout.outputs.issue-url }}" | grep -oE '[0-9]+$')
          ISSUE_API_URL="https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER"
          echo "Issue API URL: $ISSUE_API_URL"

          ISSUE_JSON=$(curl -s "$ISSUE_API_URL")
          ISSUE_STATE=$(echo "$ISSUE_JSON" | jq -r '.state')
          ISSUE_REASON=$(echo "$ISSUE_JSON" | jq -r '.state_reason // empty')
          echo "Issue State: $ISSUE_STATE"
          echo "Issue State Reason: $ISSUE_REASON"

          if [ "$ISSUE_STATE" != "closed" ]; then
            echo "ERROR: Issue should be closed but is '$ISSUE_STATE'"
            exit 1
          fi

          if [ "$ISSUE_REASON" != "not_planned" ]; then
            echo "ERROR: Issue should be closed as 'not_planned' but is '$ISSUE_REASON'"
            exit 1
          fi

          COMMENTS_JSON=$(curl -s "$ISSUE_API_URL/comments")
          TIMEOUT_COMMENT_FOUND=$(echo "$COMMENTS_JSON" | jq -r '.[] | select(.body | contains("Approval Timed Out")) | .body' | head -1)
          if [ -z "$TIMEOUT_COMMENT_FOUND" ]; then
            echo "ERROR: Issue should have a timeout comment"
            echo "Comments found:"
            echo "$COMMENTS_JSON" | jq -r '.[].body'
            exit 1
          fi
          echo "✓ Timeout test verified successfully"

      - name: Timeout Test (Explicit Rejection)
        id: test-timeout-explicit-rejection
        continue-on-error: true
        uses: ./
        with:
          timeout-seconds: 3
          fail-on-timeout: false
          issue-title: Integration Test - Timeout (Explicit Rejection)!

      - name: Verify Timeout Test (Explicit Rejection)
        run: |
          if [ "${{ steps.test-timeout-explicit-rejection.outcome }}" != "success" ]; then
            echo "ERROR: Test step outcome should have been 'success' but is '${{ steps.test-timeout-explicit-rejection.outcome }}'"
            exit 1
          fi
          echo "Approval Status: '${{ steps.test-timeout-explicit-rejection.outputs.status }}'"
          if [ "${{ steps.test-timeout-explicit-rejection.outputs.status }}" != "timed-out" ]; then
            echo "ERROR: Timeout test should have been timed-out but is '${{ steps.test-timeout-explicit-rejection.outputs.status }}'"
            exit 1
          fi
          echo "Issue URL: '${{ steps.test-timeout-explicit-rejection.outputs.issue-url }}'"

          ISSUE_NUMBER=$(echo "${{ steps.test-timeout-explicit-rejection.outputs.issue-url }}" | grep -oE '[0-9]+$')
          ISSUE_API_URL="https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER"
          echo "Issue API URL: $ISSUE_API_URL"

          ISSUE_JSON=$(curl -s "$ISSUE_API_URL")
          ISSUE_STATE=$(echo "$ISSUE_JSON" | jq -r '.state')
          ISSUE_REASON=$(echo "$ISSUE_JSON" | jq -r '.state_reason // empty')
          echo "Issue State: $ISSUE_STATE"
          echo "Issue State Reason: $ISSUE_REASON"

          if [ "$ISSUE_STATE" != "closed" ]; then
            echo "ERROR: Issue should be closed but is '$ISSUE_STATE'"
            exit 1
          fi

          if [ "$ISSUE_REASON" != "completed" ]; then
            echo "ERROR: Issue should be closed as 'completed' but is '$ISSUE_REASON'"
            exit 1
          fi

          COMMENTS_JSON=$(curl -s "$ISSUE_API_URL/comments")
          TIMEOUT_COMMENT_FOUND=$(echo "$COMMENTS_JSON" | jq -r '.[] | select(.body | contains("Approval Timed Out")) | .body' | head -1)
          if [ -z "$TIMEOUT_COMMENT_FOUND" ]; then
            echo "ERROR: Issue should have a timeout comment"
            echo "Comments found:"
            echo "$COMMENTS_JSON" | jq -r '.[].body'
            exit 1
          fi
          echo "✓ Timeout test (explicit rejection) verified successfully"

      - name: Approval Test
        id: test-approval
        uses: ./
        with:
          timeout-seconds: 30
          approval-keywords: proceed! # it's also testing custom keywords!
          issue-title: Integration Test - Run ${{ github.run_id }} - Reply with `proceed!`
          github-token: ${{ secrets.INTEGRATION_TEST_APPROVER_TOKEN }}

      - name: Verify Approval Test
        run: |
          if [ "${{ steps.test-approval.outcome }}" != "success" ]; then
            echo "ERROR: Test step outcome should have been 'success' but is '${{ steps.test-approval.outcome }}'"
            exit 1
          fi
          echo "Approval Status: '${{ steps.test-approval.outputs.status }}'"
          if [ "${{ steps.test-approval.outputs.status }}" != "approved" ]; then
            echo "ERROR: Approval test should have been approved but is '${{ steps.test-approval.outputs.status }}'"
            exit 1
          fi
          # TODO: verify approvers
          echo "Approvers: '${{ steps.test-approval.outputs.approvers }}'"
          echo "Issue URL: '${{ steps.test-approval.outputs.issue-url }}'"

          ISSUE_NUMBER=$(echo "${{ steps.test-approval.outputs.issue-url }}" | grep -oE '[0-9]+$')
          ISSUE_API_URL="https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER"
          echo "Issue API URL: $ISSUE_API_URL"

          ISSUE_JSON=$(curl -s "$ISSUE_API_URL")
          ISSUE_STATE=$(echo "$ISSUE_JSON" | jq -r '.state')
          ISSUE_REASON=$(echo "$ISSUE_JSON" | jq -r '.state_reason // empty')
          echo "Issue State: $ISSUE_STATE"
          echo "Issue State Reason: $ISSUE_REASON"

          if [ "$ISSUE_STATE" != "closed" ]; then
            echo "ERROR: Issue should be closed but is '$ISSUE_STATE'"
            exit 1
          fi

          if [ "$ISSUE_REASON" != "completed" ]; then
            echo "ERROR: Issue should be closed as 'completed' but is '$ISSUE_REASON'"
            exit 1
          fi

          COMMENTS_JSON=$(curl -s "$ISSUE_API_URL/comments")
          APPROVAL_COMMENT_FOUND=$(echo "$COMMENTS_JSON" | jq -r '.[] | select(.body | contains("Approval Received")) | .body' | head -1)
          if [ -z "$APPROVAL_COMMENT_FOUND" ]; then
            echo "ERROR: Issue should have an approval comment"
            echo "Comments found:"
            echo "$COMMENTS_JSON" | jq -r '.[].body'
            exit 1
          fi
          echo "✓ Approval test verified successfully"

      - name: Rejection Test
        id: test-rejection
        continue-on-error: true
        uses: ./
        with:
          timeout-seconds: 30
          rejections-keywords: stop! # it's also testing custom keywords!
          issue-title: Integration Test - Run ${{ github.run_id }} - Reply with `stop!`
          github-token: ${{ secrets.INTEGRATION_TEST_APPROVER_TOKEN }}

      - name: Verify Rejection Test
        run: |
          if [ "${{ steps.test-rejection.outcome }}" != "failure" ]; then
            echo "ERROR: Test step outcome should have been 'failure' but is '${{ steps.test-rejection.outcome }}'"
            exit 1
          fi
          echo "Approval Status: '${{ steps.test-rejection.outputs.status }}'"
          if [ "${{ steps.test-rejection.outputs.status }}" != "rejected" ]; then
            echo "ERROR: Rejection test should have been rejected but is '${{ steps.test-rejection.outputs.status }}'"
            exit 1
          fi
          # TODO: verify rejectors
          echo "Approvers: '${{ steps.test-rejection.outputs.approvers }}'"
          echo "Issue URL: '${{ steps.test-rejection.outputs.issue-url }}'"

          ISSUE_NUMBER=$(echo "${{ steps.test-rejection.outputs.issue-url }}" | grep -oE '[0-9]+$')
          ISSUE_API_URL="https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER"
          echo "Issue API URL: $ISSUE_API_URL"

          ISSUE_JSON=$(curl -s "$ISSUE_API_URL")
          ISSUE_STATE=$(echo "$ISSUE_JSON" | jq -r '.state')
          ISSUE_REASON=$(echo "$ISSUE_JSON" | jq -r '.state_reason // empty')
          echo "Issue State: $ISSUE_STATE"
          echo "Issue State Reason: $ISSUE_REASON"

          if [ "$ISSUE_STATE" != "closed" ]; then
            echo "ERROR: Issue should be closed but is '$ISSUE_STATE'"
            exit 1
          fi

          if [ "$ISSUE_REASON" != "not_planned" ]; then
            echo "ERROR: Issue should be closed as 'not_planned' but is '$ISSUE_REASON'"
            exit 1
          fi

          COMMENTS_JSON=$(curl -s "$ISSUE_API_URL/comments")
          REJECTION_COMMENT_FOUND=$(echo "$COMMENTS_JSON" | jq -r '.[] | select(.body | contains("Approval Rejected")) | .body' | head -1)
          if [ -z "$REJECTION_COMMENT_FOUND" ]; then
            echo "ERROR: Issue should have a rejection comment"
            echo "Comments found:"
            echo "$COMMENTS_JSON" | jq -r '.[].body'
            exit 1
          fi
          echo "✓ Rejection test verified successfully"

      - name: Close Test
        id: test-close
        continue-on-error: true
        uses: ./
        with:
          timeout-seconds: 30
          issue-title: Integration Test - Run ${{ github.run_id }} - Close Me!
          github-token: ${{ secrets.INTEGRATION_TEST_APPROVER_TOKEN }}

      - name: Verify Close Test
        run: |
          if [ "${{ steps.test-close.outcome }}" != "failure" ]; then
            echo "ERROR: Test step outcome should have been 'failure' but is '${{ steps.test-close.outcome }}'"
            exit 1
          fi
          echo "Approval Status: '${{ steps.test-close.outputs.status }}'"
          if [ "${{ steps.test-close.outputs.status }}" != "rejected" ]; then
            echo "ERROR: Close test should have been rejected but is '${{ steps.test-close.outputs.status }}'"
            exit 1
          fi
          echo "Approvers: '${{ steps.test-close.outputs.approvers }}'"
          echo "Issue URL: '${{ steps.test-close.outputs.issue-url }}'"

          ISSUE_NUMBER=$(echo "${{ steps.test-close.outputs.issue-url }}" | grep -oE '[0-9]+$')
          ISSUE_API_URL="https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER"
          echo "Issue API URL: $ISSUE_API_URL"

          ISSUE_JSON=$(curl -s "$ISSUE_API_URL")
          ISSUE_STATE=$(echo "$ISSUE_JSON" | jq -r '.state')
          ISSUE_REASON=$(echo "$ISSUE_JSON" | jq -r '.state_reason // empty')
          echo "Issue State: $ISSUE_STATE"
          echo "Issue State Reason: $ISSUE_REASON"

          if [ "$ISSUE_STATE" != "closed" ]; then
            echo "ERROR: Issue should be closed but is '$ISSUE_STATE'"
            exit 1
          fi

          if [ "$ISSUE_REASON" != "not_planned" ]; then
            echo "ERROR: Issue should be closed as 'not_planned' but is '$ISSUE_REASON'"
            exit 1
          fi

          COMMENTS_JSON=$(curl -s "$ISSUE_API_URL/comments")
          REJECTION_COMMENT_FOUND=$(echo "$COMMENTS_JSON" | jq -r '.[] | select(.body | contains("Approval Rejected")) | .body' | head -1)
          if [ -z "$REJECTION_COMMENT_FOUND" ]; then
            echo "ERROR: Issue should have a rejection comment"
            echo "Comments found:"
            echo "$COMMENTS_JSON" | jq -r '.[].body'
            exit 1
          fi
          echo "✓ Close test verified successfully"
